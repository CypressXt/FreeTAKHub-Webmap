[
    {
        "id": "d770d3ca48d341a5",
        "type": "tab",
        "label": "Webmap",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "30364cf453c684c8",
        "type": "comment",
        "z": "d770d3ca48d341a5",
        "name": "Customize this!",
        "info": "",
        "x": 600,
        "y": 340,
        "wires": []
    },
    {
        "id": "d38899243d7abb84",
        "type": "inject",
        "z": "d770d3ca48d341a5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "15",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 70,
        "y": 120,
        "wires": [
            [
                "8b181d6bedd05583"
            ]
        ]
    },
    {
        "id": "8b181d6bedd05583",
        "type": "function",
        "z": "d770d3ca48d341a5",
        "name": "CoT Ping",
        "func": "  msg.host =  global.get('FTH_FTS_URL');\n  msg.port = global.get('FTH_FTS_TCP_Port');\nconst dt = Date.now();\nconst dtD = new Date(dt).toISOString();\nconst dtD5 = new Date(dt + 250000).toISOString();\n\nmsg.payload = {\n    event: {\n        \"$\": { \n            version: \"2.0\", \n            type: \"t-x-d-d\", \n            uid : \"node-red\",\n            time: dtD,\n            start: dtD,\n            stale: dtD5,\n            how: \"m-g\"\n        }\n    }\n    \n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 120,
        "y": 200,
        "wires": [
            [
                "8449b56eae3b983e"
            ]
        ]
    },
    {
        "id": "8449b56eae3b983e",
        "type": "xml",
        "z": "d770d3ca48d341a5",
        "name": "",
        "property": "payload",
        "attr": "",
        "chr": "",
        "x": 250,
        "y": 200,
        "wires": [
            [
                "aa813829d3f7fe7e"
            ]
        ]
    },
    {
        "id": "051f20f25b4f46e9",
        "type": "comment",
        "z": "d770d3ca48d341a5",
        "name": "Keep Server Connection Alive",
        "info": "",
        "x": 300,
        "y": 60,
        "wires": []
    },
    {
        "id": "aa813829d3f7fe7e",
        "type": "tcp request",
        "z": "d770d3ca48d341a5",
        "name": "FTS Server",
        "server": "192.168.1.1",
        "port": "8087",
        "out": "sit",
        "ret": "buffer",
        "splitc": " ",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 430,
        "y": 200,
        "wires": [
            [
                "699d2c35a2dafdd1",
                "e48cd8e53bd4d730"
            ]
        ]
    },
    {
        "id": "699d2c35a2dafdd1",
        "type": "function",
        "z": "d770d3ca48d341a5",
        "name": "buf->str",
        "func": "/*\nlet oldPayload = msg.payload;\nmsg.payload = oldPayload.toString();\nreturn msg;\n*/\n\nvar rest = context.rest || \"\";\nvar p = rest + msg.payload.toString();\nvar b = p.split(\"</event>\");\nwhile (b.length > 1) {\n    var m = b.shift();\n    node.send({ payload: m + \"</event>\" });\n}\ncontext.rest = b;\nreturn;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 200,
        "wires": [
            [
                "1c61dbd1ac807e30"
            ]
        ]
    },
    {
        "id": "1c61dbd1ac807e30",
        "type": "xml",
        "z": "d770d3ca48d341a5",
        "name": "",
        "property": "payload",
        "attr": "",
        "chr": "",
        "x": 750,
        "y": 200,
        "wires": [
            [
                "6d13e472785ca47a",
                "cd34e9699449dfe2"
            ]
        ]
    },
    {
        "id": "df42b70e41dcc6d6",
        "type": "comment",
        "z": "d770d3ca48d341a5",
        "name": "Connect to FTS",
        "info": "",
        "x": 420,
        "y": 140,
        "wires": []
    },
    {
        "id": "cd4ff509ba9695ce",
        "type": "comment",
        "z": "d770d3ca48d341a5",
        "name": "Convert to Worldmap Payload",
        "info": "",
        "x": 960,
        "y": 160,
        "wires": []
    },
    {
        "id": "877c5ba931a2bc9d",
        "type": "debug",
        "z": "d770d3ca48d341a5",
        "name": "TAK map output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 200,
        "wires": []
    },
    {
        "id": "a1de30d61187ddc9",
        "type": "worldmap",
        "z": "d770d3ca48d341a5",
        "name": "TAK Map",
        "lat": "43",
        "lon": "13",
        "zoom": "4",
        "layer": "EsriDG",
        "cluster": "",
        "maxage": "5000",
        "usermenu": "show",
        "layers": "show",
        "panit": "false",
        "panlock": "false",
        "zoomlock": "false",
        "hiderightclick": "false",
        "coords": "deg",
        "showgrid": "true",
        "allowFileDrop": "true",
        "path": "/tak-map",
        "overlist": "DR,CO,RA,DN,BU,RW,SN,AC,TL,HM",
        "maplist": "OSMG,OSMC,EsriC,EsriS,EsriT,EsriO,EsriDG,NatGeo,OpTop,SW",
        "mapname": "",
        "mapurl": "",
        "mapopt": "",
        "mapwms": false,
        "x": 1100,
        "y": 240,
        "wires": []
    },
    {
        "id": "ee9f936e1af30c3a",
        "type": "worldmap in",
        "z": "d770d3ca48d341a5",
        "name": "",
        "path": "/tak-map",
        "events": "connect",
        "x": 120,
        "y": 300,
        "wires": [
            [
                "e208221f934b9cf3"
            ]
        ]
    },
    {
        "id": "0e8606528c66d3ea",
        "type": "worldmap in",
        "z": "d770d3ca48d341a5",
        "name": "event",
        "path": "/tak-map",
        "events": "other",
        "x": 330,
        "y": 440,
        "wires": [
            [
                "80fda2fb3219df88"
            ]
        ]
    },
    {
        "id": "985f5b550810775c",
        "type": "debug",
        "z": "d770d3ca48d341a5",
        "name": "No form!!",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 500,
        "wires": []
    },
    {
        "id": "e208221f934b9cf3",
        "type": "function",
        "z": "d770d3ca48d341a5",
        "name": "form",
        "func": "msg.payload = { command: {\ncontextmenu: String.raw`\n<table border=0><tr>\n<th>Attitude</th><td><select id=\"myatt\">\n  <option value=\"friend\">Friend</option>\n  <option value=\"hostile\">Hostile</option>\n  <option value=\"neutral\">Neutral</option>\n  <option value=\"unknown\">Unknown</option>\n  <option value=\"pending\">Pending</option>\n  <option value=\"suspect\">Suspect</option>\n  <option value=\"assumed\">Assumed Friend</option>\n  </select></td>\n</tr><tr>\n<th>Type</th><td><select id=\"mytyp\" value=\"Ground\" onchange=\"document.getElementById('mynam').value = this.value+'-'+parseInt(Math.random()*9999);\">\n  <option value=\"Rifleman\">Rifleman</option>\n  <option value=\"Grenadier\">Grenadier</option>\n  <option value=\"Gnd Combat Infantry Mortar\">Mortar</option>\n  <option value=\"Medic\">Medic</option>\n  <option value=\"Gnd Combat Infantry anti Tank\">anti Tank</option>\n  <option value=\"Sniper\">Sniper</option>\n  <option value=\"Recon\">Recon</option>\n  <option value=\"Gnd Combat Infantry air defense\">AA</option>\n  <option value=\"Engineer\">Engineer</option>\n</select></td>\n</tr><tr>\n<th>Timeout</th><td><input type=\"number\" id=\"mytout\" step=\"10\" value=\"600\">S</td>\n</tr><tr>\n<th>Name</th><td><input type=\"text\" id=\"mynam\"></td>\n</tr><tr>\n<th><input type=\"button\" value=\"Send\" onclick=\n'feedback(\"myform\",{\n    \"attitude\":document.getElementById(\"myatt\").value,\n    \"geobject\":document.getElementById(\"mytyp\").value,\n    \"timeout\":document.getElementById(\"mytout\").value,\n    \"name\":document.getElementById(\"mynam\").value,\n},null,true)'\n></th>\n</tr></table>\n`\n}}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 280,
        "wires": [
            [
                "a1de30d61187ddc9"
            ]
        ]
    },
    {
        "id": "aa54c78077985c6c",
        "type": "http request",
        "z": "d770d3ca48d341a5",
        "name": "Post  COT to FTS",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://192.168.1.1:19023/ManageGeoObject/postGeoObject",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 950,
        "y": 440,
        "wires": [
            [
                "1c3738d7bb7a14cd"
            ]
        ]
    },
    {
        "id": "18b6ff7a4fd41d74",
        "type": "function",
        "z": "d770d3ca48d341a5",
        "name": "",
        "func": "\n  msg.addr =  global.get('FTH_FTS_URL');\n  msg.port = global.get('FTH_FTS_API_Port');\nlet lon = msg.payload.lon;\n  let lat = msg.payload.lat;\n  let attitude = msg.payload.value.attitude;\n  let geoobject = msg.payload.value.geobject;\n  let timeOut = msg.payload.name.timeout;\n  let aName = msg.payload.value.name;\n  let token = global.get('FTH_FTS_API_Auth');\n\n \nmsg.headers = {};\nmsg.headers['Authorization'] = \"Bearer \"+ token;\n \n\nmsg.payload = [];\n\n msg.payload={\n   longitude: lon,\n latitude: lat,\nattitude: attitude,\ngeoObject: geoobject,\nhow: \"nonCoT\",\nname: aName,\ntimeout: timeOut \n };\n    \nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 440,
        "wires": [
            [
                "aa54c78077985c6c"
            ]
        ]
    },
    {
        "id": "1c3738d7bb7a14cd",
        "type": "debug",
        "z": "d770d3ca48d341a5",
        "name": "API Response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 440,
        "wires": []
    },
    {
        "id": "80fda2fb3219df88",
        "type": "switch",
        "z": "d770d3ca48d341a5",
        "name": "check message",
        "property": "payload.value.name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 580,
        "y": 440,
        "wires": [
            [
                "18b6ff7a4fd41d74"
            ],
            [
                "985f5b550810775c"
            ]
        ]
    },
    {
        "id": "20e92f79e0f1fcbd",
        "type": "comment",
        "z": "d770d3ca48d341a5",
        "name": "Add the menu",
        "info": "",
        "x": 250,
        "y": 20,
        "wires": []
    },
    {
        "id": "6ad13b6b24dfea16",
        "type": "comment",
        "z": "d770d3ca48d341a5",
        "name": "Get the result from the post",
        "info": "",
        "x": 330,
        "y": 400,
        "wires": []
    },
    {
        "id": "e48cd8e53bd4d730",
        "type": "debug",
        "z": "d770d3ca48d341a5",
        "name": "Strem output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 240,
        "wires": []
    },
    {
        "id": "6d13e472785ca47a",
        "type": "function",
        "z": "d770d3ca48d341a5",
        "name": "CoT to Map",
        "func": "/*\nThe following block of code transforms a JSONified CoT Event into a Worldmap \nPoint Payload.\n*/\nlet ttl = 3600;\nlet deleted = false; //= 'undefined';\nlet invalid = 9999999;\nlet event = msg.payload[\"event\"];\n\n/* \nIf the CoT Event contains Detail Elements, extract the first one.\nIf there are no Detail Elements, break.\n*/\nlet _detail = event[\"detail\"];\nif (_detail === undefined) { return null; }\nlet detail = _detail[0];\n\n/*\nIf the CoT Event contains a Point element, use it. If not, break.\n*/\nlet point = event[\"point\"];\nif (point === undefined) { return null; }\n\n/* We'll use UID a couple of times, so lets set it as a variable here. */\nlet uid = event[\"$\"][\"uid\"];\n\n/* Extract the Event Type and Affiliation. */\nlet eventType = event[\"$\"][\"type\"];\nif (eventType === \"t-x-d-d\") { return; }  // ignore pings\n\nlet et = eventType.split(\"-\");\nlet affil = et[1];\n\n/* There is no '.' notation in SDR, so mark Neutral. */\nif (affil.includes(\".\")) { affil = \"n\"; }\n\n/* Ram the CoT Event Type portions into a SIDR Type */\nlet SIDC = `s${affil}${et[2]}p${et[3] || \"-\"}${et[4] || \"-\"}${et[5] || \"-\"}--------`;\n\n/* Now handle all the weird extra CoT ones... */\nif ((/a-.-X-i-o/).test(eventType)) { SIDC = `E${affil}IP--------` }\nelse if ((/a-.-X-i-g-a/).test(eventType)) { SIDC = `EFNPAB------` }\nelse if ((/a-.-X-i-g-e/).test(eventType)) { SIDC = `EFNPAC------` }\nelse if ((/a-.-X-i-g-l/).test(eventType)) { SIDC = `EFNPAD------` }\nelse if ((/a-.-X-i-g-s/).test(eventType)) { SIDC = `EFNPAE------` }\nelse if ((/a-.-X-i-g-v-e/).test(eventType)) { SIDC = `WFSPWSVE----` }\nelse if ((/a-.-X-i-g-v/).test(eventType)) { SIDC = `EFNPAG------` }\nelse if ((/a-.-X-i-g/).test(eventType)) { SIDC = `E${affil}NPA-------` }\nelse if ((/a-.-X-i-m-c/).test(eventType)) { SIDC = `WFSPWSTSS---` }\nelse if ((/a-.-X-i-m-d/).test(eventType)) { SIDC = `EFNPBB------` }\nelse if ((/a-.-X-i-m-n/).test(eventType)) { SIDC = `EFNPBM------` }\nelse if ((/a-.-X-i-f/).test(eventType)) { SIDC = `E${affil}IPC-------` }\nelse if ((/a-.-X-i-h/).test(eventType)) { SIDC = `E${affil}OPA-------` }\nelse if ((/a-.-X-i-t-v-a/).test(eventType)) { SIDC = `E${affil}IPHA------` }\n\nelse if ((/a-.-G-I-X-H/).test(eventType)) { SIDC = `S${affil}GPIXH---H-` }\nelse if ((/a-.-G-I-i-l/).test(eventType)) { SIDC = `E${affil}OPDJC-----` }\nelse if ((/a-.-G-I-R-P/).test(eventType)) { SIDC = `S${affil}GPIRP---H-` }\nelse if ((/a-.-G-I-U-E/).test(eventType)) { SIDC = `S${affil}GPIUE---H-` }\nelse if ((/a-.-G-I-U-T/).test(eventType)) { SIDC = `S${affil}GPIUT---H-` }\nelse if ((/a-.-G-I-i-e/).test(eventType)) { SIDC = `E${affil}OPBC------` }\n\nelse if ((/a-.-G-U-C-V-R-E/).test(eventType)) { SIDC = `S${affil}APMFO-----` }\nelse if ((/a-.-A-M-F-Q-H/).test(eventType)) { SIDC = `S${affil}APMFH-----` }\n\nelse if ((/a-.-G-I-U-T/).test(eventType)) { SIDC = `S${affil}GPIUT---H-` }\nelse if ((/b-r-.-O-I-V/).test(eventType)) { SIDC = `S${affil}EFIPAC------` }\n// emergency open send symbol and reduce ttl\nelse if ((/b-a-o-opn/).test(eventType)) {\n  SIDC = `S${affil}GDU-------`;\n  //{ SIDC = `SFGPUCI-----` ;\n  ttl = 36;\n  node.warn('emergency Open');\n}\nelse if ((/b-a-o-tbl/).test(eventType)) {\n  SIDC = `S${affil}GDU-------`;\n  //{ SIDC = `SFGPUCI-----` ;\n  ttl = 36;\n  node.warn('trouble emergency Open');\n}\nelse if ((/b-a-o-pan/).test(eventType)) {\n  SIDC = `S${affil}GXU-------`;\n  //{ SIDC = `SFGPUCI-----` ;\n  ttl = 36;\n  node.warn('ring the bell emergency Open');\n}\n//emergency is closed SFGDU-------\nelse if ((/b-a-o-can/).test(eventType)) {\n     //deleted = true\n    SIDC = `SFGPUCI-----`; \n  node.warn('emergency closed');\n    }\n\n\nconsole.log(eventType, \"--->\", SIDC);\nSIDC = SIDC.substr(0, 12).toUpperCase();\n\n/* \nPoints on the Worldmap can only have one uniquite identifier, which is also\nthat Points display name. If possible, use a Callsign, otherwise use UID.\n*/\nlet callsign;\nlet _contact = detail[\"contact\"];\nif (_contact === undefined) {\n  callsign = uid;\n} else {\n  callsign = _contact[0][\"$\"][\"callsign\"];\n}\n\n/* Mouse-over Label */\nlet label = `Callsign: ${callsign} UID: ${uid}<br/>Type: ${eventType} SIDC: ${SIDC}`\n\nlet remarks = detail[\"remarks\"];\nif (remarks) {\n  let remark = remarks[0][\"$\"];\n  label = `${label}<br/>${remark}`;\n}\n\nlet track = detail[\"track\"]\nlet bearing = null;\nlet speed = null;\n\nif (track) {\n  let course = +track[0][\"$\"][\"course\"];\n  if (course) {\n    if (course !== invalid) {\n      bearing = course;\n    }\n  }\n\n  let _speed = +track[0][\"$\"][\"speed\"];\n  if (_speed) {\n    if (_speed !== invalid) {\n      speed = _speed;\n    }\n  }\n}\n\n/* \nIf CoT Point CE is set and is not invalid, use that as Worldmap Point Accuracy. \n*/\nlet accuracy = null;\nlet ce = +event[\"point\"][0][\"$\"][\"ce\"];\nif (ce != invalid) { accuracy = ce; }\n\n/* Add a helpful weblink to Worldmap Points. */\nlet weblink = null;\nif (uid.includes(\"ICAO\")) {\n  weblink = `https://globe.adsbexchange.com/?icao=${uid.replace(\"ICAO-\", \"\")}`;\n} else if (uid.includes(\"APRS\")) {\n  weblink = `https://qrz.com/db/${uid.replace(\"APRS.\", \"\").split(\"-\")[0]}`;\n}\nelse {\n  weblink = 'https://spatialillusions.com/unitgenerator/';\n}\n\nlet lat = +event[\"point\"][0][\"$\"][\"lat\"];\nlet lon = +event[\"point\"][0][\"$\"][\"lon\"];\nlet alt = +event[\"point\"][0][\"$\"][\"hae\"];\nif (alt == invalid) { alt = undefined; }\n\nif (lat == 0 && lon == 0 && !alt) {\n  console.log(callsign, \"is at null island.\", eventType)\n  lat = Math.round(1000000 * lat + Math.random() * 10000) / 1000000;\n  lon = Math.round(1000000 * lon + Math.random() * 10000) / 1000000;\n}\n\n/* Serialize as a Worldmap compatible Payload. */\nmsg.payload = {\n  name: callsign,\n  tooltip: label,\n  deleted: deleted,\n  lat: lat,\n  lon: lon,\n  alt: alt,\n  speed: speed,\n  bearing: bearing,\n  accuracy: accuracy,\n  type: eventType,\n  SIDC: SIDC,\n  ttl: ttl,\n  weblink: weblink,\n  layer: eventType,\n  options: { scale: 0.8 }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 200,
        "wires": [
            [
                "a1de30d61187ddc9",
                "877c5ba931a2bc9d"
            ]
        ]
    },
    {
        "id": "bc7e2edc9e231604",
        "type": "comment",
        "z": "d770d3ca48d341a5",
        "name": "API Token here",
        "info": "",
        "x": 940,
        "y": 380,
        "wires": []
    },
    {
        "id": "cd34e9699449dfe2",
        "type": "debug",
        "z": "d770d3ca48d341a5",
        "name": "XML payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.event",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 80,
        "wires": []
    }
]